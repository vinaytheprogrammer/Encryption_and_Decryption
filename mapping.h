#include<bits/stdc++.h>
using namespace std;
string  encrypt_mapping(char ch)
{
    map<char,string >mmap;
    mmap['A']="😄";
    mmap['B']="😃";
    mmap['C']="🌵";
    mmap['D']="🚧";
    mmap['E']="💨";
    mmap['F']="😮";
    mmap['G']="🏑";
    mmap['H']="🖕";
    mmap['I']="📀";
    mmap['J']="📳";
    mmap['K']="💅";
    mmap['L']="🤗";
    mmap['M']="🎃";
    mmap['N']="😂";
    mmap['O']="😆";
    mmap['P']="🏈";
    mmap['Q']="😇";
    mmap['R']="😢";
    mmap['S']="😴";
    mmap['T']="😳";
    mmap['U']="🥸";
    mmap['V']="🍞";
    mmap['W']="🎏";
    mmap['X']="🏀";
    mmap['Y']="🚗";
    mmap['Z']="🌀";
    mmap['a']="📇";
    mmap['b']="🍰";
    mmap['c']="🤕";
    mmap['d']="🎠";
    mmap['e']="🪚";
    mmap['f']="🥕";
    mmap['g']="🤸";
    mmap['h']="😢";
    mmap['i']="📷";
    mmap['j']="🧁";
    mmap['k']="😔";
    mmap['l']="😣";
    mmap['m']="🤭";
    mmap['n']="🌝";
    mmap['o']="🌞";
    mmap['p']="🤺";
    mmap['q']="😓";
    mmap['r']="💛";
    mmap['s']="💙";
    mmap['t']="💚";
    mmap['u']="🧡";
    mmap['v']="🥼";
    mmap['w']="🤮";
    mmap['x']="🍑";
    mmap['y']="🥜";
    mmap['z']="🍐";
    mmap['1']="🐫";
    mmap['2']="🐴";
    mmap['3']="🦁";
    mmap['4']="🐯";
    mmap['5']="🦓";
    mmap['6']="🐐";
    mmap['7']="🦚";
    mmap['8']="🐕";
    mmap['9']="🐈";
    mmap['0']="🐁";
    mmap['!']="🫀";
    mmap['#']="🫁";
    mmap['$']="📝";
    mmap['%']="🐧";
    mmap['^']="📦";
    mmap['&']="📄";
    mmap['*']="📃";
    mmap['(']="📟";
    mmap[')']="🎮";
    mmap['_']="🌴";
    mmap['-']="🥞";
    mmap['+']="🍶";
    mmap['=']="🌊";
    mmap['/']="🐙";
    mmap['"']="🍢";
    mmap[':']="🏢";
    mmap[';']="👻";
    mmap['>']="😩";
    mmap['<']="🆗";
    mmap['?']="👌";
    mmap[',']="🙆";
    mmap['.']="🏆";
    mmap['@']="🚡";
    mmap['\\']="🔙";
    mmap['{']="🦡";
    mmap['}']="🥯";
    mmap['[']="🎲";
    mmap[']']="🙃";
    mmap[' ']="👺";
    map<char,char> :: iterator it;
    for(auto it=mmap.begin();it!=mmap.end();it++)
        if(it->first==ch)
            return it->second;
    }
char  decrypt_mapping(string st)
{
    map<string,char>mmap;
    mmap["😄"]= 'A';
    mmap["😃"]= 'B';
    mmap["🌵"]= 'C';
    mmap["🚧"]= 'D';
    mmap["💨"]= 'E';
    mmap["😮"]= 'F';
    mmap["🏑"]= 'G';
    mmap["🖕"]= 'H';
    mmap["📀"]= 'I';
    mmap["📳"]= 'J';
    mmap["💅"]= 'K';
    mmap["🤗"]= 'L';
    mmap["🎃"]= 'M';
    mmap["😂"]= 'N';    
    mmap["😆"]= 'O';
    mmap["🏈"]= 'P';
    mmap["😇"]= 'Q';
    mmap["😢"]= 'R';
    mmap["😴"]= 'S';
    mmap["😳"]= 'T';
    mmap["🥸"]= 'U';
    mmap["🍞"]= 'V';
    mmap["🎏"]= 'W';
    mmap["🏀"]= 'X';
    mmap["🚗"]= 'Y';
    mmap["🌀"]= 'Z';
    mmap["📇"]= 'a';
    mmap["🍰"]= 'b';
    mmap["🤕"]= 'c';
    mmap["🎠"]= 'd';
    mmap["🪚"]= 'e';
    mmap["🥕"]= 'f';
    mmap["🤸"]= 'g';
    mmap["😢"]= 'h';
    mmap["📷"]= 'i';
    mmap["🧁"]= 'j';
    mmap["😔"]= 'k';
    mmap["😣"]= 'l';
    mmap["🤭"]= 'm';
    mmap["🌝"]= 'n';
    mmap["🌞"]= 'o';
    mmap["🤺"]= 'p';
    mmap["😓"]= 'q';
    mmap["💛"]= 'r';
    mmap["💙"]= 's';
    mmap["💚"]= 't';
    mmap["🧡"]= 'u';
    mmap["🥼"]= 'v';
    mmap["🤮"]= 'w';
    mmap["🍑"]= 'x';
    mmap["🥜"]= 'y';
    mmap["🍐"]= 'z';
    mmap["🐫"]= '1';
    mmap["🐴"]= '2';
    mmap["🦁"]= '3';
    mmap["🐯"]= '4';
    mmap["🦓"]= '5';
    mmap["🐐"]= '6';
    mmap["🦚"]= '7';
    mmap["🐕"]= '8';
    mmap["🐈"]= '9';
    mmap["🐁"]= '0';
    mmap["🫀"]= '!';
    mmap["🫁"]= '#';
    mmap["📝"]= '$';
    mmap["🐧"]= '%';
    mmap["📦"]= '^';
    mmap["📄"]= '&';
    mmap["📃"]= '*';
    mmap["📟"]= '(';
    mmap["🎮"]= ')';
    mmap["🌴"]= '_';
    mmap["🥞"]= '-';
    mmap["🍶"]= '+';
    mmap["🌊"]= '=';
    mmap["🐙"]= '/';
    mmap["🍢"]= '"';
    mmap["🏢"]= ':';
    mmap["👻"]= ';';
    mmap["😩"]= '>';
    mmap["🆗"]= '<';    
    mmap["👌"]= '?';
    mmap["🙆"]= ',';
    mmap["🏆"]= '.';
    mmap["🚡"]= '@';
    mmap["🔙"]= '\\';
    mmap["🦡"]= '{';
    mmap["🥯"]= '}';
    mmap["🎲"]= '[';
    mmap["🙃"]= ']';
    mmap["👺"]= ' ';
    map<string,char> :: iterator it;
    for(auto it=mmap.begin();it!=mmap.end();it++)
    {
        if(it->first==st)
            return it->second;
    }
}
